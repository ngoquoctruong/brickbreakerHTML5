{"version":3,"sources":["assets/scripts/view/Ball.js","assets/scripts/view/BrickLayout.js","assets/scripts/model/BrickModel.js","assets/scripts/view/BrickView.js","assets/scripts/controller/GameCtl.js","assets/scripts/model/GameModel.js","assets/scripts/view/GameView.js","assets/scripts/view/LandingScene.js","assets/scripts/view/LevelItem.js","assets/scripts/model/LevelModel.js","assets/scripts/view/OverPanel.js","assets/scripts/view/Paddle.js","assets/scripts/view/PausePanel.js","assets/scripts/view/SelectLevelScene.js","assets/scripts/view/SoundButton.js","assets/scripts/view/TutorialButton.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACI;AAEA;AACI;AADQ;AAIZ;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACI;AACI;AACA;;AACJ;AACI;AACI;AACA;AACH;;AACD;AATR;AAWH;AAED;AACI;;AAEA;AACI;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;AACA;AACA;AACA;AACA;;AACJ;AACI;AACA;AAhBR;AAkBH;AAED;AACI;;AAEA;AACI;AACI;AACA;;AACJ;AACI;;AACA;AACI;AACA;AACH;;AACD;AAVR;AAYH;AAED;AACI;AACI;AACA;AACH;AACJ;AA9EI;;;;;;;;;;ACAT;;AAEA;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AALQ;AAQZ;AAEI;AACA;AACA;AACA;AAEA;;AAEA;AAEI;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACH;AACJ;AAlCI;;;;;;;;;;ACFT;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AAEA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfQ;AAkBZ;AAEA;AAEA;;AAzBK;;;;;;;;;;ACPT;AACI;AAEA;AACG;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAXS;AAcZ;AACI;;AAEA;AACI;AACA;AACH;AACG;AACA;AACA;AACA;AACH;AACJ;AAED;AACI;;AAEA;AACI;;AACA;AACI;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;;AACJ;AACI;AACA;AAfR;;AAkBA;AACA;AACA;AACH;AACG;AACH;AACJ;AAED;AAAqB;;AACjB;AACA;AACgB;AAAW;AAAU;AAAZ;AAAX;AAGd;AACgB;AAAS;AAAU;AAAZ;AAAT;AACJ;AAAA;AAEb;AAED;AACI;AACe;AAAY;AAAwE;AAA1E;AAAZ;AACE;AAAY;AAAwE;AAA1E;AAAZ;AACG;AAAY;AAAwE;AAA1E;AAAZ;AACE;AAAY;AAAwE;AAA1E;AAAZ;AACE;AAAY;AAAoE;AAAtE;AAAZ;AAEjB;AAlFI;;;;;;;;;;ACAT;;AACA;;AACA;;AAEA;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBQ;AAqBZ;AACA;AACI;AACI;AACI;AACH;AACJ;AACD;AACA;AAEA;AACA;AACA;AACH;AAED;AACI;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACA;AACA;AACI;AACH;AACJ;AAED;AAAiB;;AACb;AACA;AACI;;AAEA;AACI;AACA;AACH;AACG;AACA;AACH;AACJ;AACJ;AAED;AACI;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AAEA;AACA;AACA;;AAEA;AACI;AACA;AACA;AACH;AACG;AACA;AACH;AACJ;AAED;AACI;AACA;AACA;AACH;AAED;AACI;AACA;;AAEA;AACI;AACA;AACA;AACA;;AACA;AACI;AACA;AACH;AACJ;AACG;AACH;AACJ;AAED;AACI;AACA;AACH;AAED;AACI;AACH;AAED;AACI;AACH;AAED;AACI;AACH;AAED;AACI;AACA;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACI;AACI;AACA;AAFW;AAIf;AACH;AACJ;AAED;AAAa;;AACT;AAEA;;AACA;AACI;AACA;AACH;;AAED;;AAEA;AACI;AACA;AACH;AAGD;;;AACA;AACA;;AACA;AACI;AACI;AACA;AACA;AACI;AACH;AACD;AACI;AACA;AACA;AACH;AAVU;AAYlB;AACG;AACA;AACH;AACJ;AAtNI;;;;;;;;;;ACJT;AACI;AAEA;AACI;AACA;AAFQ;AAKZ;AACI;AACA;AACH;AAED;AACI;AACH;AAED;AACI;AACH;AAnBI;;;;;;;;;;ACAT;AACI;AAEA;AACI;AACA;AAFQ;AAKZ;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACH;AAjBI;;;;;;;;;;ACAT;AACI;AAEA;AACI;AACA;AACA;AAHQ;AAMZ;AACI;AACI;AACA;AACA;AACA;;AACA;AACA;AACA;AACH;AACG;AACH;AACJ;AAED;AACI;AACH;AAED;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACA;AACI;;AACA;AAAgD;AAA4B;AAE5E;AACA;AACA;AACA;;AACH;AACJ;AAlDI;;;;;;;;;;ACAT;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AANQ;AASZ;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACH;AAED;AAAiB;;AACb;AACA;AACA;AACA;AAEA;AACa;AAAU;AAAU;AAAZ;AAAV;AACD;AAAA;AAEb;AAED;AACI;AACA;AACH;AAzCI;;;;;;;;;;;;;ACAY;AACnB;AACE;AACA;AACA;AACA;AACD;;;;AAED;AACE;;AACA;AACE;AACE;AACA;AACD;AACF;;AAED;AACD;;;;;;;;;;;;;;;;AClBH;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAPQ;AAUZ;AACA;AAIA;AACI;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACA;AACH;AAnDI;;;;;;;;;;ACCT;AACI;AAEA;AACI;AADQ;AAIZ;AACI;AACA;;AAGA;;AAGA;AACA;AACH;AAED;AACI;AAEA;;AACA;AACI;AACH;AACG;AACH;;AACD;AACH;AAED;AACI;AACI;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;AARR;AAUH;AAED;AACI;AACI;AACA;AACI;AACA;;AACJ;AACA;AACI;AACA;AARR;AAUH;AAED;AACI;AAEA;AACA;AACH;AAED;AACI;AACA;AACH;AAnEI;;;;;;;;;;ACDT;AACI;AAEA;AACI;AADQ;AAIZ;AACI;AACH;AAED;AACI;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACH;AAED;AACI;AACH;AAED;AACI;AACA;AACH;AA9BI;;;;;;;;;;ACAT;;AAEA;AACI;AAEA;AACI;AACA;AACA;AACA;AACA;AALQ;AAQZ;AACI;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AACI;AACI;AACA;AACA;AACA;AACH;AACJ;AAED;AACI;AACH;AAhCI;;;;;;;;;;ACFT;AACI;AAEA;AACI;AACA;AACA;AAHQ;AAMZ;AACI;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACI;AACH;AACG;AACH;AACJ;AA9BI;;;;;;;;;;ACAT;AACI;AAEA;AACI;AACA;AACA;AAHQ;AAMZ;AACI;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AApBI","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        rigidbody : cc.RigidBody\n    },\n\n    init(gameCtl) {\n        this._isReady = true;\n        this.gameCtl = gameCtl;\n        this.node.position = cc.v2(221,50);\n        this.rigidbody.linearVelocity = cc.v2(0,0);\n    },\n\n    onLoad() {\n        this.node.parent.on(\"touchmove\", this.onTouchMove, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n    },\n\n    onKeyDown (event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.back:\n                cc.director.end();\n                break;   \n            default:\n                if (this._isReady) {\n                    this._isReady = false;\n                    this.rigidbody.linearVelocity = cc.v2(0,1).mul(400);\n                }\n                break;\n        }\n    },\n\n    onBeginContact(contact, self, other) {\n        if(!this.gameCtl) return;\n        \n        switch (other.tag) {\n            case 1:\n                this.gameCtl.onBallContactBrick(self.node, other.node);\n                break;\n            case 2:\n                this.gameCtl.onBallContactGround(self.node, other.node);\n                break;\n            case 3:\n                let paddlePos = this.node.parent.convertToWorldSpaceAR(other.node.position);\n                const ballPos = contact.getWorldManifold().points[0];\n                paddlePos.y -= 40;\n                this._ballDirectionn = ballPos.sub(paddlePos).normalize();\n                this.gameCtl.onBallContactPaddle(self.node, other.node);\n                break;\n            case 4:\n                this.gameCtl.onBallContactWall(self.node, other.node);\n                break;\n        }\n    },\n\n    onEndContact(contact, self, other) {\n        if(!this.gameCtl) return;\n        \n        switch (other.tag) {\n            case 3:\n                this.rigidbody.linearVelocity = this._ballDirectionn.mul(400);\n                break;\n            case 4:\n                const direction = this.rigidbody.linearVelocity.normalize();\n                if (Math.abs(direction.y) < 0.15) {\n                    const newDirection = cc.v2(this.rigidbody.linearVelocity.x, 400 * 0.25 * (direction.y >= 0 ? 1: -1));\n                    this.rigidbody.linearVelocity = newDirection;\n                }\n                break;\n        }\n    },\n\n    onTouchMove () {\n        if (this._isReady) {\n            this._isReady = false;\n            this.rigidbody.linearVelocity = cc.v2(0,1).mul(400);\n        }\n    }\n});","const BrickView         = require('./BrickView');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        padding: 0,\n        spacing: 0,\n        cols: 0,\n        brickPrefab: cc.Prefab,\n        bricksNumber: 50\n    },\n\n    init(levelModel) {\n\n        this.node.removeAllChildren();\n        this.bricksNumber = levelModel.column * levelModel.row;\n        this.brickMap = levelModel.brickMap;\n        this.cols = levelModel.column;\n        \n        let rowIndex = 0;\n\n        for (let i = 0; i < this.bricksNumber; i++) {\n\n            const rowData = this.brickMap[rowIndex];\n            const columnIndex = i % this.cols;\n            const columnData = rowData[columnIndex];\n            const brickNode = cc.instantiate(this.brickPrefab);\n\n            brickNode.getComponent(BrickView).setBrickType(columnData);\n            brickNode.parent = this.node;\n            brickNode.x = this.padding + (i % this.cols) * (brickNode.width + this.spacing) + brickNode.width / 2;\n            brickNode.y = -this.padding - Math.floor(i / this.cols) * (brickNode.height + this.spacing) - brickNode.height / 2;\n\n            if (columnIndex >= levelModel.column - 1) rowIndex += 1;\n        }\n    }\n});","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n       brickNode :          cc.Node,\n       brickSprite :        cc.Sprite,\n       brickTextures:       [cc.SpriteFrame],\n       brickType0Textures:  [cc.SpriteFrame],\n       brickType1Textures:  [cc.SpriteFrame],\n       brickType2Textures:  [cc.SpriteFrame],\n       brickType3Textures:  [cc.SpriteFrame],\n\n       collider:       cc.PhysicsBoxCollider,\n       hp:             0,\n       score:          0\n    },\n\n    setBrickType (type) {\n        this._type = type;\n\n        if (type === 0) {\n            this.brickSprite.spriteFrame = null;\n            this.collider.node.active = false;\n        } else {\n            this.brickSprite.spriteFrame = this.brickTextures[type];\n            this.collider.node.active = true;\n            this.hp = type;\n            this.score = type * 2 + 10;\n        }\n    },\n\n    hitBall () {\n        this.hp -= 1;\n\n        if (this.hp > 0) {\n            let texture;\n            switch (this._type) {\n                case 0:\n                    texture = this.brickType0Textures;\n                    break;\n                case 1:\n                    texture = this.brickType1Textures;\n                    break;\n                case 2:\n                    texture = this.brickType2Textures;\n                    break;\n                case 3:\n                    texture = this.brickType3Textures;\n                    break;    \n                default:\n                    texture = this.brickType0Textures;\n                    break;    \n            }\n    \n            const textureIndex = this.hp > (this._type / 2) ? 1 : 0;\n            this.brickSprite.spriteFrame = texture[textureIndex];\n            this.animateHitBrick();\n        } else {\n            this.animateBreakBrick();\n        }\n    },\n\n    animateBreakBrick () {\n        this.collider.enabled = false;\n        cc.tween(this.brickNode)\n            .to(0.15, { opacity: { value: 0, easing: 'sineIn' } })\n            .start();\n\n        cc.tween(this.brickNode)\n            .to(0.15, { scale: { value: 2, easing: 'sineIn' } })\n            .call(() => this.node.removeFromParent())\n            .start();\n    },\n\n    animateHitBrick () {\n        cc.tween(this.brickNode)\n            .to(0.1, { position: { value: cc.v2(this.brickNode.position.x - 2, this.brickNode.position.y), easing: 'quartInOut' } })\n            .to(0.1, { position: { value: cc.v2(this.brickNode.position.x + 4, this.brickNode.position.y), easing: 'quartInOut' } })\n            .to(0.12, { position: { value: cc.v2(this.brickNode.position.x - 1, this.brickNode.position.y), easing: 'quartInOut' } })\n            .to(0.12, { position: { value: cc.v2(this.brickNode.position.x + 2, this.brickNode.position.y), easing: 'quartInOut' } })\n            .to(0.13, { position: { value: cc.v2(this.brickNode.position.x, this.brickNode.position.y), easing: 'quartInOut' } })\n            .start();\n    }\n});\n","const GameModel = require('GameModel');\nconst LevelModel = require('../model/LevelModel');\nconst BrickView = require('../view/BrickView');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        gameView:        require('GameView'),\n        ball:            require('Ball'),\n        paddle:          require('Paddle'),\n        brickLayout:     require('BrickLayout'),\n        overPanel:       require('OverPanel'),\n        pausePanel:      require('PausePanel'),\n        levelConfig:     [cc.JsonAsset],\n        loading:         cc.Node,\n\n        isStopGame: false,\n\n        // audio\n        brickHitSound:   cc.AudioClip,\n        brickBreakSound: cc.AudioClip,\n        winSound:        cc.AudioClip,\n        loseSound:       cc.AudioClip,\n        clickSound:      cc.AudioClip,\n        bgmAudioClip:  cc.AudioClip\n    },\n\n    // use this for initialization\n    onLoad() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event) => {\n            if (event.keyCode === cc.macro.KEY.back) {\n                cc.director.end();\n            }\n        });\n        this.physicsManager = cc.director.getPhysicsManager();\n        this.physicsManager.enabled = true;\n\n        this.gameModel = new GameModel();\n        this._curLevel = ~~cc.sys.localStorage.getItem('curlevel') || 1;\n        this.loadLevel(this._curLevel);\n    },\n\n    init(levelModel) {\n        this.prepareAds();\n\n        this.physicsManager.enabled = true;\n        this.gameModel.init(levelModel.brickCount);\n\n        this.gameView.init(this);\n        this.ball.init(this);\n        this.paddle.init(this);\n        this.brickLayout.init(levelModel);\n        this.overPanel.init(this);\n    },\n\n    startGame(config) {\n        this.loading.active = false;\n        cc.audioEngine.playMusic(this.bgmAudioClip, true);\n        this.init(config);\n        this.isStopGame = false;\n    },\n\n    loadLevel (level) {\n        const config = new LevelModel(this.levelConfig[level - 1].json);\n        this.startGame(config);\n    },\n\n    loadCurrentLevel () {\n        this.loading.active = true;\n        const self = this;\n        this.showAds(() => {\n            cc.director.loadScene(\"game\");\n        });\n    },\n\n    moveNextLevel () {\n        const self = this;\n        this.showAds(() => {\n            const nextLevel = self._curLevel + 1;\n\n            if (this.levelConfig[nextLevel-1]){\n                cc.sys.localStorage.setItem('curlevel', nextLevel);\n                cc.director.loadScene(\"game\");\n            } else {\n                this.loading.active = true;\n                cc.director.loadScene(\"selectLevel\");\n            }\n        });\n    },\n\n    onResumeGame() {\n        cc.director.resume();\n        cc.audioEngine.resumeMusic();\n        this.physicsManager.enabled = true;\n        this.isStopGame = false;\n        this.playSound(this.clickSound);\n    },\n\n    stopGame(isGameWin) {\n        cc.audioEngine.stopMusic();\n\n        this.isStopGame = true;\n        this.physicsManager.enabled = false;\n        const highestScore = this.saveHighestScore(this._curLevel, this.gameModel.score);\n\n        if (isGameWin) {\n            this.playSound(this.winSound);\n            cc.sys.localStorage.setItem('playerLevel', this._curLevel);\n            this.overPanel.show(this.gameModel.score, highestScore, isGameWin);\n        } else {\n            this.playSound(this.loseSound);\n            this.overPanel.show(this.gameModel.score, highestScore, isGameWin);\n        }\n    },\n\n    saveHighestScore (level, newScore) {\n        const oldScore = cc.sys.localStorage.getItem(`highestLevel${level}`) || 0;\n        if (newScore > oldScore) cc.sys.localStorage.setItem(`highestLevel${level}`, newScore);\n        return newScore > oldScore ? newScore : oldScore;\n    },\n\n    onBallContactBrick(ballNode, brickNode) {\n        const brick = brickNode.getComponent(BrickView);\n        brick.hitBall();\n\n        if (brick.hp === 0) {\n            this.playSound(this.brickBreakSound);\n            this.gameModel.addScore(brick.score);\n            this.gameModel.minusBrick(1);\n            this.gameView.updateScore(this.gameModel.score);\n            if (this.gameModel.bricksNumber <= 0) {\n                this.playSound(this.winSound);\n                this.stopGame(true);\n            }\n        } else {\n            this.playSound(this.brickHitSound);\n        }     \n    },\n\n    onBallContactGround(ballNode, groundNode) {\n        this.stopGame();\n        this.playSound(this.brickHitSound);\n    },\n\n    onBallContactPaddle(ballNode, paddleNode) {\n        this.playSound(this.brickHitSound);\n    },\n\n    onBallContactWall(ballNode, brickNode) {\n        this.playSound(this.brickHitSound);\n    },\n\n    onDestroy() {\n        this.physicsManager.enabled = false;\n    },\n\n    onPause () {\n        this.physicsManager.enabled = false;\n        this.isStopGame = true;\n        cc.audioEngine.pauseMusic();\n        cc.director.pause();\n        this.playSound(this.clickSound);\n        this.pausePanel.show();\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    },\n\n    prepareAds () {\n        if (!window.isAdPrepared){\n            window.adBreak({\n                type: 'next',\n                name: 'menu_view'\n            });\n            window.isAdPrepared = true;\n        }\n    },\n\n    showAds (cb) {\n        const RATIO_ADS = 0;\n\n        if (this._adsCallNumber === undefined) this._adsCallNumber = 0;\n        if (this._adsCallNumber < RATIO_ADS) {\n            this._adsCallNumber++;\n            cb && cb();\n        }\n\n        this._adsCallNumber = 0;\n\n        const modifiedCallback = function () {\n            document.getElementById('GameCanvas').focus();\n            cb && cb();\n        };\n\n        // the will be a silence if no ad is returned when we call adBreak()\n        // so we have to schedule the action for that case.\n        this.unscheduleAllCallbacks();\n        this.scheduleOnce(modifiedCallback, 0.5);\n        try {\n            window.adBreak({\n                type: 'next',\n                name: 'game_restart',\n                beforeBreak: (() => {\n                    this.unscheduleAllCallbacks();\n                }).bind(this),\n                afterBreak: (() => {\n                    // this.prepareAds();\n                    window.isAdPrepared = false;\n                    modifiedCallback();\n                }).bind(this)\n            });\n        } catch (e) {\n            cc.error(e);\n            modifiedCallback();\n        }\n    },\n });","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        score:0,\n        bricksNumber:0,\n    },\n\n    init(brickNumber){\n        this.score = 0;\n        this.bricksNumber = brickNumber;\n    },\n\n    addScore(score){\n        this.score += score;\n    },\n\n    minusBrick(n){\n        this.bricksNumber -= n;\n    },\n\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        scoreLabel: cc.Label,\n        levelabel: cc.Label,\n    },\n\n    init(gameCtl){\n        this.gameCtl = gameCtl;\n        this.scoreLabel.string = '0';\n        const level = cc.sys.localStorage.getItem('curlevel');\n        this.levelabel.string = level;\n    },\n\n    updateScore(score){\n        this.scoreLabel.string = score;\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        clickSound:     cc.AudioClip,\n        bgmAudioClip:   cc.AudioClip,\n        loading:        cc.Node\n    },\n\n    onLoad () {\n        if (!window.adsbygoogle) {\n            var script = document.createElement(\"script\");\n            script.src = \"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\";\n            script.setAttribute('data-ad-client', 'pub-3901483273906883');\n            script.setAttribute('data-adbreak-test', 'on'); // for test purpose\n            script.async = true;\n            script.onload = script.onreadystatechange = this.initializeAd.bind(this);\n            document.head.appendChild(script);\n        } else {\n            this.initializeAd();\n        }\n    },\n\n    start () {\n        cc.audioEngine.playMusic(this.bgmAudioClip, true);\n    },\n\n    onPlayButtonClicked (event, gameMode) {\n        this.loading.active = true;\n        cc.director.loadScene(\"selectLevel\");\n        this.playSound(this.clickSound);\n        cc.audioEngine.stopMusic();\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    },\n\n    initializeAd() {\n        // this.isAdInitialized to make sure we won't initialize this when returned from other scenes.\n        if (!this.isAdInitialized) {\n            this.isAdInitialized = true;\n            window.adBreak = window.adConfig = function(o) {window.adsbygoogle.push(o);}\n            // optional\n            // window.adConfig({\n            //     preloadAdBreaks: 'on', // uncomment this one if you want to change to default value `auto`\n            //     sound: 'on',\n            // });\n        }\n    },\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        clickSound:     cc.AudioClip,\n        onLayer:        cc.Node,\n        offLayer:       cc.Node,\n        button:         cc.Button,\n        levelItem:      cc.Node,\n        levelLabel:     cc.Label\n    },\n\n    setLevel (level, handler) {\n        this._handler = handler;\n        this._level = level;\n        this.levelLabel.string = level;\n        const playerLevel = cc.sys.localStorage.getItem('playerLevel') || 0;\n        const isPass = playerLevel >= this._level;\n        this.onLayer.active = isPass;\n        this.offLayer.active = !isPass;\n\n        const isHide = this._level >= (~~playerLevel + 2);\n        this.levelItem.opacity = isHide ? 100 : 255;\n        this.button.interactable = !isHide;\n    },\n\n    onSelectLevel () {\n        this._handler && this._handler();\n        cc.sys.localStorage.setItem('curlevel', this._level);\n        cc.director.loadScene(\"game\");\n        this.playSound(this.clickSound);\n\n        cc.tween(this.bgmAudioSource)\n            .to(1, { volume: { value: 0, easing: 'sineIn' } })\n            .call(() => this.bgmAudioSource.stop())\n            .start();\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    },\n});\n","export default class LevelModel {\n  constructor (config) {\n    this.brickCount = this.getTotalBricks(config);\n    this.column     = Object.keys(config[0]).length;\n    this.row        = Object.keys(config).length;\n    this.brickMap   = config;\n  }\n\n  getTotalBricks (config) {\n    let count = 0;\n    for (const row in config) { \n      for (const column in config[row]) {\n        if (config[row][column] === 0) continue;\n        count += 1;\n      }\n    }\n\n    return count;\n  }\n}\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        replayBtn :         cc.Node,\n        nextBtn:            cc.Node,\n        scoreLabel:         cc.Label,\n        highestScoreLabel:  cc.Label,\n        clickSound:         cc.AudioClip,\n        gameOverPanel:      cc.Node,\n        gameWinPanel:       cc.Node\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n    },\n\n    init(gameCtl){\n        this.gameCtl = gameCtl;\n        this.node.active = false;\n    },\n\n    show(score, highestScore, isWin){\n        this.node.active = true;\n        this.gameOverPanel.active = !isWin;\n        this.gameWinPanel.active = isWin;\n        this.nextBtn.active = isWin;\n        this.replayBtn.active = !isWin;\n        this.scoreLabel.string = score;\n        this.highestScoreLabel.string = highestScore;\n    },\n\n    onRestart(){\n        this.gameCtl.loadCurrentLevel();\n        this.playSound(this.clickSound);\n    },\n\n    onNextLevel(){\n        this.gameCtl.moveNextLevel();\n        this.playSound(this.clickSound);\n    },\n\n    onChangeStage(){\n        cc.director.loadScene(\"selectLevel\");\n        this.playSound(this.clickSound);\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    }\n});\n","\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        speed: 500\n    },\n\n    onLoad() {\n        this._minX = this.node.width / 2;\n        this._maxX = 450 - this.node.width / 2;\n\n        // touch event\n        this.node.parent.on(\"touchmove\", this.onTouchMove, this);\n\n        // keyboard event\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    update (dt) {\n        if (this._gameCtrl && this._gameCtrl.isStopGame) return;\n\n        let newXpos = this.node.x;\n        if (this._isMoveLeft) {\n            newXpos = Math.max(this._minX, Math.min(this._maxX,newXpos - (this.speed * dt)))\n        } else if (this._isMoveRight) {\n            newXpos = Math.max(this._minX, Math.min(this._maxX,newXpos + (this.speed * dt)))\n        }\n        this.node.x = newXpos;\n    },\n\n    onKeyDown (event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.a:\n                this._isMoveLeft = true;\n                break;   \n            case cc.macro.KEY.right:    \n            case cc.macro.KEY.d:\n                this._isMoveRight = true;\n                break;\n        }\n    },\n\n    onKeyUp (event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.a:\n                this._isMoveLeft = false;\n                break;   \n            case cc.macro.KEY.right:    \n            case cc.macro.KEY.d:\n                this._isMoveRight = false;\n                break;\n        }\n    },\n\n    onTouchMove (event) {\n        if (this._gameCtrl.isStopGame) return;\n\n        const newPos = this.node.parent.convertToNodeSpaceAR(event.getLocation());\n        this.node.x = Math.max(this._minX, Math.min(this._maxX, newPos.x))\n    },\n\n    init(gameCtl){\n        this.node.x = 221;\n        this._gameCtrl = gameCtl;\n    }\n\n});","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        clickSound:     cc.AudioClip,\n    },\n\n    show(){\n        this.node.active = true;\n    },\n\n    onReplay(){\n        cc.director.resume();\n        cc.director.loadScene(\"game\");\n        this.playSound(this.clickSound);\n    },\n\n    onChangeStage(){\n        cc.director.resume();\n        cc.director.loadScene(\"selectLevel\");\n        this.playSound(this.clickSound);\n    },\n\n    onResume(){\n        this.node.active = false;\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    },\n});\n","const LevelItem = require('./LevelItem');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        clickSound:     cc.AudioClip,\n        bgmAudioClip:   cc.AudioClip,\n        loading:        cc.Node,\n        levelPrefab:    cc.Prefab,\n        contentView:    cc.Node\n    },\n\n    onLoad () {\n        cc.audioEngine.playMusic(this.bgmAudioClip, true);\n        this.loadLevelConfig();\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    },\n\n    loadLevelConfig () {\n        for (let i = 0; i < 30; i++) {\n            const levelItem = cc.instantiate(this.levelPrefab);\n            const levelCtrl = levelItem.getComponent(LevelItem);\n            levelCtrl.setLevel(i + 1, this.onSelect.bind(this));\n            this.contentView.addChild(levelItem);\n        }\n    },\n\n    onSelect () {\n        this.loading.active = true;\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        buttonSprite:    cc.Sprite,\n        buttonTextures:  [cc.SpriteFrame],\n        clickSound:      cc.AudioClip,\n    },\n\n    onLoad () {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        this.buttonSprite.spriteFrame = this.buttonTextures[soundConfig];\n        this.setSoundConfig(soundConfig);\n    },\n\n    onSoundButtonClicked () {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(this.clickSound, false, soundConfig);\n        const newConfig = soundConfig == 1 ? 0 : 1;\n        cc.sys.localStorage.setItem('soundConfig', newConfig);\n        this.buttonSprite.spriteFrame = this.buttonTextures[newConfig];\n        this.setSoundConfig(newConfig);\n    },\n\n    setSoundConfig (soundConfig) {\n        if (soundConfig == 1) {\n            cc.audioEngine.setMusicVolume(1.0);\n        } else {\n            cc.audioEngine.setMusicVolume(0);\n        }\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        tutorialLayer:    cc.Node,\n        isShow:          false,\n        clickSound:      cc.AudioClip,\n    },\n\n    onTutorialClicked () {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(this.clickSound, false, soundConfig);\n        this.tutorialLayer.active = !this.isShow;\n        this.isShow = !this.isShow;\n        this.playSound(this.clickSound);\n    },\n\n    playSound (sound) {\n        const soundConfig = cc.sys.localStorage.getItem('soundConfig') || 1;\n        cc.audioEngine.play(sound, false, soundConfig);\n    },\n});\n"],"file":"index.js"}